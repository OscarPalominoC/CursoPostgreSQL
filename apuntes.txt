¿Qué es PostgreSQL?
    Open Source
    Objeto-Relacional
    Usa SQL
    Desde 1986
    PostGIS
    PL/PgSQL
    Cumple ACID = 
        Atomicity:Corresponde a que se puede separar las funciones que está desarrollando la base de datos en pequeñas tareas, y desarrollarlas como un todo. Si alguna tarea falla, se realiza un rollback, es decir, se deshacen los cambios hechos.
        Consistency: Todo lo que se desarrollo entorno al objeto relacional en que se puede tener 2 tablas que poseen llaves primarias, llaves foráneas, y consistencia quiere decir que los datos tienen una congruencia entre sí.
        Isolation: Puedes tener varias tareas ejecutandose al mismo tiempo en la base de datos. 
        Durability: Puedes tener la seguridad que la información no se perderá en caso de un fallo catastrófico, ¿Por qué? PostgreSQL primero relaciona los cambios en una bitacora, y luego escribe los cambios en la base de datos.

¿Por qué PostgreSQL?
    Tipos de Datos
    Integridad de Datos
    Concurrencia. Rendimiento
    Fiabilidad, recuperación ante desastres
    Seguridad
    Extensibilidad
    Internacionalización, Búsqueda de texto.

https://platzi.com/blog/que-es-el-teorema-cap-y-como-elegir-la-base-de-datos-para-tu-proyecto/
https://www.postgresql.org/


Instalación de postgres en ubuntu.
    sudo apt-get install postgresql postgresql-contrib
instalación de la interfaz gráfica.
    sudo apt-get install pgadmin3

Iniciar la base de datos
    sudo -u postgres<usuario> psql
Cambiar la contraseña del usuario postgres.
    Dentro de la base de datos activa:
    alter user postgres with password '<contraseña>';

Comandos más frecuentes:
    \l -> Lista todas las bases de datos instaladas en el servidor.
    \c <nombre BD> -> Ingresa a la base de datos.
    \dt -> Lista las relaciones en la base de datos.
    \d <nombre columna> -> Muestra a detalle cómo se crea un dato
    \h -> lista los comandos de postgres para ser usados como SQL.
    \g -> Ejecuta la última función que se haya utilizado en postgres.
    \timing -> Inicializa el contador de tiempo para que la consola muestre en pantalla cuánto tiempo demoró en ejecutar un comando.
Postgres funciona con SQL estándar, eso quiere decir que todos los comandos deben terminar con ;


Artículo
Comandos más utilizados en PostgreSQL 
La Consola
La consola en PostgreSQL es una herramienta muy potente para crear, administrar y depurar nuestra base de datos. podemos acceder a ella después de instalar PostgreSQL y haber seleccionado la opción de instalar la consola junto a la base de datos.
PostgreSQL está más estrechamente acoplado al entorno UNIX que algunos otros sistemas de bases de datos, utiliza las cuentas de usuario nativas para determinar quién se conecta a ella (de forma predeterminada). El programa que se ejecuta en la consola y que permite ejecutar consultas y comandos se llama psql, psql es la terminal interactiva para trabajar con PostgreSQL, es la interfaz de línea de comando o consola principal, así como PgAdmin es la interfaz gráfica de usuario principal de PostgreSQL.
Después de emitir un comando PostgreSQL, recibirás comentarios del servidor indicándote el resultado de un comando o mostrándote los resultados de una solicitud de información. Por ejemplo, si deseas saber qué versión de PostgreSQL estás usando actualmente, puedes hacer lo siguiente:
    SELECT VERSION();
Comandos de ayuda
En consola los dos principales comandos con los que podemos revisar el todos los comandos y consultas son:
    \? Con el cual podemos ver la lista de todos los comandos disponibles en consola, comandos que empiezan con backslash ()
    \h Con este comando veremos la información de todas las consultas SQL disponibles en consola. Sirve también para buscar ayuda sobre una consulta específica, para buscar información sobre una consulta específica basta con escribir \h seguido del inicio de la consulta de la que se requiera ayuda, así: \h ALTER
De esta forma podemos ver toda la ayuda con respecto a la consulta ALTER
Comandos de navegación y consulta de información
    \c Saltar entre bases de datos
    \l Listar base de datos disponibles
    \dt Listar las tablas de la base de datos
    \d <nombre_tabla> Describir una tabla
    \dn Listar los esquemas de la base de datos actual
    \df Listar las funciones disponibles de la base de datos actual
    \dv Listar las vistas de la base de datos actual
    \du Listar los usuarios y sus roles de la base de datos actual
Comandos de inspección y ejecución
    \g Volver a ejecutar el comando ejecutando justo antes
    \s Ver el historial de comandos ejecutados
    \s <nombre_archivo> Si se quiere guardar la lista de comandos ejecutados en un archivo de texto plano
    \i <nombre_archivo> Ejecutar los comandos desde un archivo
    \e Permite abrir un editor de texto plano, escribir comandos y ejecutar en lote. \e abre el editor de texto, escribir allí todos los comandos, luego guardar los cambios y cerrar, al cerrar se ejecutarán todos los comandos guardados.
    \ef Equivalente al comando anterior pero permite editar también funciones en PostgreSQL
Comandos para debug y optimización
    \timing Activar / Desactivar el contador de tiempo por consulta
Comandos para cerrar la consola
    \q Cerrar la consola
Ejecutando consultas en la base de datos usando la consola
De manera predeterminada PostgreSQL no crea bases de datos para usar, debemos crear nuestra base de datos para empezar a trabajar, verás que existe ya una base de datos llamada postgres pero no debe ser usada ya que hace parte del CORE de PostgreSQL y sirve para gestionar las demás bases de datos.
Para crear una base de datos debes ejecutar la consulta de creación de base de datos, es importante entender que existe una costumbre no oficial al momento de escribir consultas; consiste en poner en mayúsculas todas las palabras propias del lenguaje SQL cómo CREATE, SELECT, ALTE, etc y el resto de palabras como los nombres de las tablas, columnas, nombres de usuarios, etc en minúscula. No está claro el porqué de esta especie de “estándar” al escribir consultas SQL pero todo apunta a que en el momento que SQL nace, no existían editores de consultas que resaltaran las palabras propias del lenguaje para diferenciar fácilmente de las palabras que no son parte del lenguaje, por eso el uso de mayúsculas y minúsculas.
Las palabras reservadas de consultas SQL usualmente se escriben en mayúscula, ésto para distinguir entre nombres de objetos y lenguaje SQL propio, no es obligatorio, pero podría serte útil en la creación de Scripts SQL largos.
Vamos ahora por un ligero ejemplo desde la creación de una base de datos, la creación de una tabla, la inserción, borrado, consulta y alteración de datos de la tabla.
Primero crea la base de datos, “CREATE DATABASE transporte;” sería el primer paso.
Ahora saltar de la base de datos postgres que ha sido seleccionada de manera predeterminada a la base de datos transporte recién creada utilizando el comando \c transporte.
Ahora vamos a crear la tabla tren, el SQL correspondiente sería:
    CREATE TABLE tren ( id serial NOT NULL, modelo character varying, capacidad integer, CONSTRAINT tren_pkey PRIMARY KEY (id) );
La columna id será un número autoincremental (cada vez que se inserta un registro se aumenta en uno), modelo se refiere a una referencia al tren, capacidad sería la cantidad de pasajeros que puede transportar y al final agregamos la llave primaria que será id.
Ahora que la tabla ha sido creada, podemos ver su definición utilizando el comando \d tren
PostgreSQL ha creado el campo id automáticamente cómo integer con una asociación predeterminada a una secuencia llamada ‘tren_id_seq’. De manera que cada vez que se inserte un valor, id tomará el siguiente valor de la secuencia, vamos a ver la definición de la secuencia. Para ello, \d tren_id_seq es suficiente:
Vemos que la secuencia inicia en uno, así que nuestra primera inserción de datos dejará a la columna id con valor uno.
    INSERT INTO tren( modelo, capacidad ) VALUES (‘Volvo 1’, 100);
Consultamos ahora los datos en la tabla:
    SELECT * FROM tren;
Vamos a modificar el valor, establecer el tren con id uno que sea modelo Honda 0726. Para ello ejecutamos la consulta tipo 
    UPDATE tren SET modelo = 'Honda 0726' Where id = 1;
Verificamos la modificación SELECT * FROM tren;
Ahora borramos la fila: DELETE FROM tren WHERE id = 1;
Verificamos el borrado SELECT * FROM tren;
El borrado ha funcionado tenemos 0 rows, es decir, no hay filas. Ahora activemos la herramienta que nos permite medir el tiempo que tarda una consulta \timing
Probemos cómo funciona al medición realizando la encriptación de un texto cualquiera usando el algoritmo md5:
    SELECT MD5('Vamos a encriptar un texto como el que lees.');


TIPOS DE DATOS EN PostgreSQL
https://www.postgresql.org/docs/11/datatype.html
https://todopostgresql.com/postgresql-data-types-los-tipos-de-datos-mas-utilizados/


Artículo
Jerarquía de Bases de Datos 
Toda jerarquía de base de datos se basa en los siguientes elementos:
    Servidor de base de datos: Computador que tiene un motor de base de datos instalado y en ejecución.
    Motor de base de datos: Software que provee un conjunto de servicios encargados de administrar una base de datos.
    Base de datos: Grupo de datos que pertenecen a un mismo contexto.
    Esquemas de base de datos en PostgreSQL: Grupo de objetos de base de datos que guarda relación entre sí (tablas, funciones, relaciones, secuencias).
    Tablas de base de datos: Estructura que organiza los datos en filas y columnas formando una matriz.
PostgreSQL es un motor de base de datos.
La estructura de la base de datos diseñada para el reto corresponde a los siguientes
elementos:
    BD: transporte -> Schema: public.
La base de datos se llama transporte, usaremos su esquema predeterminado public.
El esquema public contiene las siguientes tablas:
    Estación
    Pasajero
    Tren
Y las tablas de relaciones entre cada uno de los elementos anteriores son:
    Trayecto
    Viaje
El esquema relacional entre las tablas corresponde al siguiente diagrama:
    IMG -> ESQUEMA

Estación
Contiene la información de las estaciones de nuestro sistema, incluye datos de nombre con tipo de dato texto y dirección con tipo de dato texto, junto con un número de identificación único por estación.
Tren
Almacena la información de los trenes de nuestro sistema, cada tren tiene un modelo con tipo de dato texto y una capacidad con tipo de dato numérico que representa la cantidad de personas que puede llevar ese tren, también tiene un ID único por tren.
Pasajero
Es la tabla que contiene la información de las personas que viajan en nuestro sistema de transporte masivo, sus columnas son nombre tipo de dato texto con el nombre completo de la persona, direccion_residencia con tipo de dato texto que indica dónde vive la persona, fecha_nacimiento tipo de dato texto y un ID único tipo de dato numérico para identificar a cada persona.
Trayecto
Relaciona los trenes con las estaciones, simula ser las rutas que cada uno de los trenes pueden desarrollar entre las estaciones
Viaje
Relaciona Trayecto con Pasajero ilustrando la dinámica entre los viajes que realizan las personas, los cuales parten de una estación y se hacen usando un tren.
Reportar un problema
Creación de Tablas


INSERCIÓN DE INFORMACIÓN
    Passenger:
        INSERT INTO public.passenger(
        name, address, birthday)
        VALUES ('Passenger', 'Address', '2020-06-09');
    
    Station:
        INSERT INTO public.station(
        name, address)
        VALUES ('Name', 'Address');
    
    Train:
        INSERT INTO public.train(
        model, capacity)
        VALUES ('Model', 'Capacity');
    
    Trip:
        INSERT INTO public.trip(
        id_train, id_station)
        VALUES (1, 2);
    
    Travel:
        INSERT INTO public.trip(
        id, id_train, id_station)
        VALUES (1, 1);

TABLAS PARTICIONADAS
NO hacen uso de llaves primarias.
Al momento de crearlas, en la pestaña general se selecciona la opción partitioned table. Esto le indicará a POSTGRES que es una tabla particionada.
Se ingresan los datos de las columnas, y luego se dirige a 'Partitions'.
Se selecciona el tipo de partición, rango, lista o hash. Para la clase, fue de rango.
Se agrega una Partition Key (+).
Se selecciona el tipo de llave, columna o expresión (columna en la clase)
Se selecciona la columna. y Ok
Clic derecho a la tabla particionada, Scripts, Insert Script.
Se escribe lo siguiente:
    INSERT INTO public.log_travel(
	id_travel, date_travel)
	VALUES (1, '2020-10-10');
        
    SELECT * FROM log_travel;
        
    CREATE TABLE log_travel202010 PARTITION OF log_travel
    FOR VALUES FROM ('2020-10-01') TO ('2020-10-31');

Lo que primero se debe ejecutar es la creación de la partición:
    CREATE TABLE log_travel202010 PARTITION OF log_travel
    FOR VALUES FROM ('2020-10-01') TO ('2020-10-31');

Luego, se guardan los datos.
    INSERT INTO public.log_travel(
	id_travel, date_travel)
	VALUES (1, '2020-10-10');

Por último, se verifican:
    SELECT * FROM log_travel;

Como es una tabla particionada, si intento guardar un dato más, no me dejará, porque ya fue almacenada en memoria, así que lo ideal para este tipo de tablas, es automatizarla y que se llene con los datos disponibles en la DB.

